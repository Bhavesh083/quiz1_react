{"version":3,"sources":["Quizdata.js","App.js","reportWebVitals.js","index.js"],"names":["Quizdata","id","question","options","answer","App","useState","curindex","setCurindex","isEnd","setIsEnd","score","setScore","userAns","setUserAns","className","length","map","data","option","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAiCeA,EAjCE,CACb,CACIC,GAAI,EACHC,SAAU,+BACVC,QAAS,CAAC,iBAAkB,kBAAkB,kBAAkB,aAChEC,OAAS,kBAEd,CACIH,GAAG,EACFC,SAAU,UACVC,QAAS,CAAC,MAAM,MAAM,MAAM,OAC5BC,OAAS,OAEd,CACIH,GAAG,EACFC,SAAU,mBACVC,QAAS,CAAC,QAAQ,QAAQ,SAAS,aACnCC,OAAS,SAEd,CACIH,GAAG,EACFC,SAAU,YACVC,QAAS,CAAC,MAAM,MAAM,MAAM,OAC5BC,OAAS,OAEd,CACIH,GAAG,EACFC,SAAU,aACVC,QAAS,CAAC,KAAK,IAAI,IAAI,KACvBC,OAAS,M,MC6CHC,MAtEf,WAAe,IAAD,EAEkBC,mBAAS,GAF3B,mBAEPC,EAFO,KAEGC,EAFH,OAGYF,oBAAS,GAHrB,mBAGPG,EAHO,KAGAC,EAHA,OAIYJ,mBAAS,GAJrB,mBAIPK,EAJO,KAIAC,EAJA,OAKgBN,mBAAS,MALzB,mBAKPO,EALO,KAKEC,EALF,KA4Bd,OACE,qBAAKC,UAAU,MAAf,SACEN,EACA,sBAAKM,UAAU,kBAAf,UACC,6CAAgBJ,EAAhB,IAAwBX,EAASgB,UAChChB,EAASiB,KAAI,SAAAC,GAAI,OAClB,sBAAKH,UAAU,UAAf,UACA,4BACGG,EAAKhB,WAER,kDACmBgB,EAAKd,mBAMzB,qCACD,sBAAKW,UAAU,mBAAf,UACC,sBAAKA,UAAU,iBAAf,UACE,+BAAOR,EAAS,IADlB,IAC6BP,EAASgB,UAEtC,qBAAKD,UAAU,gBAAf,SACEf,EAASO,GAAUL,cAGtB,qBAAKa,UAAU,iBAAf,SACEf,EAASO,GAAUJ,QAAQc,KAAI,SAAAE,GAAM,OACtC,wBAAQC,QAAS,WAhClBN,EAgC+BK,IAA9B,SACEA,SAIH,wBAAQJ,UAAU,OAAOK,QAAS,kBApDlCN,EAAW,MAERP,EAAWP,EAASgB,OAAO,GAC9BR,EAAYD,EAAW,GAEnBA,IAAaP,EAASgB,OAAO,GACjCN,GAAU,QAEPG,IAAUb,EAASO,GAAUH,QAChCQ,EAASD,EAAM,KA2Cf,SACGJ,EAASP,EAASgB,OAAO,EAAE,OAAO,iBCtDzBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.563b0b60.chunk.js","sourcesContent":["const Quizdata = [\r\n    { \r\n        id :0,\r\n         question: 'Who is the founder of Linux?',\r\n         options: ['Linus Torvalds', 'Mark Zuckerberg','Chris Wanstrath','Microsoft'],\r\n         answer : 'Linus Torvalds'\r\n    },\r\n    {\r\n        id:1,\r\n         question: '23*10=?',\r\n         options: ['238','173','298','230'],\r\n         answer : '230'\r\n    },\r\n    {\r\n        id:2,\r\n         question: 'Who owns Iphone?',\r\n         options: ['Apple','Intel','Amazon','Microsoft'],\r\n         answer : 'Apple'\r\n    },\r\n    {\r\n        id:3,\r\n         question: '896-296=?',\r\n         options: ['623','600','500','596'],\r\n         answer : '600'\r\n    },\r\n    {\r\n        id:4,\r\n         question: '1000%200=?',\r\n         options: ['12','8','5','4'],\r\n         answer : '5'\r\n     }\r\n    ] \r\n\r\nexport default Quizdata;","import React, { useState } from 'react';\nimport Quizdata from './Quizdata'\nimport Ap from './Ap.css'; \n\nfunction App(){\n\t\nconst [curindex, setCurindex] = useState(0);\nconst [isEnd, setIsEnd] = useState(false);\nconst [score, setScore] = useState(0);\nconst [userAns, setUserAns] = useState(null);\n\nconst nextQues = () => {\n\n   setUserAns(null);\n   \n   if(curindex < Quizdata.length-1){\n\t  setCurindex(curindex + 1)\n}\n   if (curindex === Quizdata.length-1) {\n\t  setIsEnd( true)\n}\n   if(userAns===Quizdata[curindex].answer){\n\t  setScore(score+1)\n}\n}\n\n\nconst checkAns = (answers) =>{\n   setUserAns(answers)\n}\n\n\nreturn (\n\t\t<div className='app'>\n\t\t\t{isEnd? \n\t\t\t(<div className='score-selection'>\n\t\t\t\t <h2>You scored {score}/{Quizdata.length}</h2>\n\t\t\t\t {Quizdata.map(data =>\n\t\t\t\t <div className='keyshow'>\n\t\t\t\t\t<p>\n\t\t\t\t\t  {data.question}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t Correct answer : {data.answer}\n\t\t\t\t\t</p>\n\t\t\t\t </div>\n\t\t\t\t )}\n\t\t\t</div>)\n\t\t\t:\n\t\t\t(<>\n\t\t\t<div className='question-section'>\n\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t<span>{curindex+1}</span>/{Quizdata.length}\n\t\t\t\t</div>\n\t\t\t\t<div className='question-text'>\n\t\t\t\t\t{Quizdata[curindex].question}\n\t\t\t\t</div>\n\t\t\t</div>    \n\t\t\t<div className='answer-section' >\n\t\t\t\t{Quizdata[curindex].options.map(option => \n\t\t\t\t<button onClick={()=>checkAns(option)}>\n\t\t\t\t\t{option}\n\t\t\t\t</button>\n\t\t\t\t )}\n\t\t\t</div>     \n\t\t\t<button className='next' onClick={()=>nextQues()}>\n\t\t\t\t\t{curindex<Quizdata.length-1?'Next':'Submit'}\n\t\t\t</button>\n\t\t\t</>\n\t\t\t)} \n\t\t</div>\n\t)\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}